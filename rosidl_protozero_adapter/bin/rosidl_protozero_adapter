#!/usr/bin/env python3

import sys
import argparse
import pathlib

from catkin_pkg.package import package_exists_at
from catkin_pkg.package import parse_package

from rosidl_protozero_adapter import translate

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Convert Protobuf files to .idl",
    )

    parser.add_argument(
        'interface_files', type=pathlib.Path, nargs='+',
        help='The interface files to convert',
    )

    args = parser.parse_args()

    for interface_file in args.interface_files:
        package_dir = interface_file.parent.absolute()

        while (
                package_dir.parents and
                not package_exists_at(package_dir)
        ):
            package_dir = package_dir.parent

        if not package_dir.parents:
            print(
                f"Could not find package for '{interface_file}'",
                file=sys.stderr,
            )
            continue

        warnings = []
        package = parse_package(package_dir, warnings=warnings)

        try:
            translate(
                package_dir,
                package.name,
                interface_file \
                    .absolute() \
                    .relative_to(package_dir),
                interface_file.parent,
            )
        except Exception as e:
            print(
                f"Could not convert '{interface_file}': {str(e)}",
                file=sys.stderr,
            )
